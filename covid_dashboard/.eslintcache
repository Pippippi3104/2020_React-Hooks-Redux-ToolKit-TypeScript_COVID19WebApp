[{"/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/index.tsx":"1","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/serviceWorker.ts":"2","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/app/store.ts":"3","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/App.tsx":"4","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/counter/counterSlice.ts":"5","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/counter/Counter.tsx":"6","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/covid/covidSlice.ts":"7","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/covid/Cards/Cards.tsx":"8","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/covid/Chart/Chart.tsx":"9","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/covid/PieChart/PieChart.tsx":"10","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/covid/SwitchCountry/SwitchCountry.tsx":"11","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/covid/DashBoard/DashBoard.tsx":"12"},{"size":648,"mtime":1610460703908,"results":"13","hashOfConfig":"14"},{"size":5424,"mtime":1610460703910,"results":"15","hashOfConfig":"14"},{"size":494,"mtime":1610463585435,"results":"16","hashOfConfig":"14"},{"size":719,"mtime":1610632682246,"results":"17","hashOfConfig":"14"},{"size":1851,"mtime":1610460703906,"results":"18","hashOfConfig":"14"},{"size":1626,"mtime":1610460703905,"results":"19","hashOfConfig":"14"},{"size":4372,"mtime":1610550788775,"results":"20","hashOfConfig":"14"},{"size":2846,"mtime":1610549560241,"results":"21","hashOfConfig":"14"},{"size":2148,"mtime":1610550788774,"results":"22","hashOfConfig":"14"},{"size":1844,"mtime":1610585634447,"results":"23","hashOfConfig":"14"},{"size":1417,"mtime":1610631132260,"results":"24","hashOfConfig":"14"},{"size":2191,"mtime":1610633392193,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1umhxy2",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/index.tsx",[],["53","54"],"/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/serviceWorker.ts",[],"/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/app/store.ts",[],"/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/App.tsx",["55","56"],"/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/counter/counterSlice.ts",[],"/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/counter/Counter.tsx",[],"/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/covid/covidSlice.ts",[],"/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/covid/Cards/Cards.tsx",["57","58"],"import React from 'react'\nimport \"./Cards.modules.css\";\nimport CountUp from \"react-countup\";\nimport { Card, CardContent, Typography, Grid, Container } from \"@material-ui/core\";\n\n/* icons */\nimport { GiHastyGrave } from \"react-icons/gi\";\nimport { MdLocalHospital } from \"react-icons/md\";\nimport { AiFillLike } from \"react-icons/ai\";\n\n/* Redux */\nimport { useSelector } from \"react-redux\";\nimport { selectData } from \"../covidSlice\";\n\nconst Cards: React.FC = () => {\n    const data = useSelector(selectData);\n    return (\n        <div className=\"container\">\n            <Grid container spacing={1} justify=\"center\">\n                <Grid item xs={12} md={3} component={Card} className=\"infected\">\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            <MdLocalHospital />\n                            Infected persons\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp \n                                start={0}\n                                end={data.confirmed.value}\n                                duration={1.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item xs={12} md={3} component={Card} className=\"recovered\">\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            <AiFillLike />\n                            Recovered persons\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp \n                                start={0}\n                                end={data.recovered.value}\n                                duration={1.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item xs={12} md={3} component={Card} className=\"deaths\">\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            <AiFillLike />\n                            Dead persons\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp \n                                start={0}\n                                end={data.deaths.value}\n                                duration={1.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards\n","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/covid/Chart/Chart.tsx",[],"/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/covid/PieChart/PieChart.tsx",[],"/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/covid/SwitchCountry/SwitchCountry.tsx",["59"],"import React from 'react'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\n\n/* redux */\nimport { useDispatch } from \"react-redux\";\nimport { fetchAsyncGetCountry } from \"../covidSlice\";\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        marginBottom: theme.spacing(3),\n        minWidth: 320,\n    },\n}));\n\nconst SwitchCountry: React.FC = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const countries = [\n        \"japan\",\n        \"china\",\n        \"us\",\n        \"france\",\n        \"italy\",\n        \"spain\",\n        \"united kingdom\",\n        \"germany\",\n        \"russia\",\n        \"brazil\",\n        \"taiwan\",\n        \"thailand\",\n        \"new zealand\",\n        \"sweden\",\n        \"india\",\n    ];\n\n    return(\n        <FormControl className=\"formControl\">\n            <NativeSelect\n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => \n                    dispatch(fetchAsyncGetCountry(e.target.value))}\n            >\n                <option value=\"\">\n                    Worldwide\n                </option>\n                {countries.map((country, i) => (\n                    <option key={i} value={country}>\n                        {country}\n                    </option>\n                ))}\n            </NativeSelect>\n        </FormControl>\n    );\n};\n\nexport default SwitchCountry\n","/Users/satoshishimamurasecond/Desktop/SatoshiShimamura/60_Udemy/2020_React-Hooks-Redux-ToolKit-TypeScript_COVID19WebApp/covid_dashboard/src/features/covid/DashBoard/DashBoard.tsx",["60"],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":2,"column":8,"nodeType":"67","messageId":"68","endLine":2,"endColumn":12},{"ruleId":"65","severity":1,"message":"69","line":3,"column":10,"nodeType":"67","messageId":"68","endLine":3,"endColumn":17},{"ruleId":"65","severity":1,"message":"70","line":4,"column":47,"nodeType":"67","messageId":"68","endLine":4,"endColumn":56},{"ruleId":"65","severity":1,"message":"71","line":7,"column":10,"nodeType":"67","messageId":"68","endLine":7,"endColumn":22},{"ruleId":"65","severity":1,"message":"72","line":17,"column":11,"nodeType":"67","messageId":"68","endLine":17,"endColumn":18},{"ruleId":"65","severity":1,"message":"73","line":10,"column":25,"nodeType":"67","messageId":"68","endLine":10,"endColumn":45},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Counter' is defined but never used.","'Container' is defined but never used.","'GiHastyGrave' is defined but never used.","'classes' is assigned a value but never used.","'fetchAsyncGetCountry' is defined but never used.","no-global-assign","no-unsafe-negation"]